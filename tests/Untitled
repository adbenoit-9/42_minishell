#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
static void	pipeline(char ***cmd)
{
	int fd[6];
	pid_t pid;
	int k;
	int j;
	
	for(int i = 0; i < 3; i++)
	{
		if( pipe(fd + i * 2) < 0 )
		{
			printf("error\n");
			exit(0);
		}
	}
	k = 0;
	j = 0;
	while (cmd[k])
	{
		if ((pid = fork()) == 0)
		{
			if (k != 0)
			{
				if ( dup2(fd[j - 2], 0) < 0)
				{
					printf("error\n");
					exit(0);
				}
			}
			if (cmd[k + 1] != NULL)
			{
				if( dup2(fd[j + 1], 1) < 0 )
				{
					printf("error\n");
					exit(0);
				}
			}
			for(int i = 0; i < 6; i++)
			{
				close(fd[i]);
			}
		}
		else
		{
			j += 2;
			k++;
		}
	}
	for (int i = 0; i < 2 * 3; i++ )
		close( fd[i] );
	int status;
	k =0;
	for(int i = 0; i < 3 + 1; i++)
	{
		status = 0;
	//	pid = waitpid(pid, &status, WUNTRACED | WCONTINUED);
		wait(&status);
		if (WIFEXITED(status))
			if (WEXITSTATUS(status) == 15)
				printf("minishell: command not found: %s\n", cmd[k][0]);
		k++;
	}
}
/*
 * Compute multi-pipeline based
 * on a command list.
 */
int
//ls -la | grep nano | rev
main(int argc, char *argv[])
{
	char *ls[] = {"pwddd", NULL};
	char *rev[] = {"ls", NULL};
	char *nl[] = {"ls -kjsdhajkdaksj", NULL};
	char *nl1[] = {"pwd", NULL};
	char **cmd[] = {ls, rev, nl, nl1, NULL};
	pipeline(cmd);
	return (0);
}
